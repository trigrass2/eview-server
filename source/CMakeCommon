#####################################################
## STLPORT Need -pthread/-pthreads flag.           ##
#####################################################

#MESSAGE("${CMAKE_MODULE_PATH})  为空字符串，不知为何？
#MESSAGE("${CMAKE_CURRENT_LIST_FILE}")  本文件路径（含文件名），D:/Work/eview/source/CMakeCommon
#MESSAGE("${CMAKE_CURRENT_SOURCE_DIR}") CMakeLists.txt所在文件的路径
#MESSAGE("${CMAKE_CURRENT_LIST_DIR}")  本文件路径（不含文件名） D:/Work/eview/source
#MESSAGE("${CMAKE_SYSTEM_NAME}") 
#${CMAKE_CURRENT_LIST_FILE},本文件路径，D:/Work/eview/source/CMakeCommon
#INCLUDE(${CMAKE_CURRENT_LIST_DIR}/CMakeIncludeDir)

SET(PK_LIB_DIR ${CMAKE_CURRENT_LIST_DIR}/../lib)
SET(PK_BIN_DIR ${CMAKE_CURRENT_LIST_DIR}/../bin)
SET(PK_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/../include)
IF(MSVC)
    IF(MSVC_VERSION GREATER 1899) #VS2015
        #MESSAGE("${MSVC_VERSION}")
        ADD_DEFINITIONS(-DWIN32 -DWINDOWS -DACE_HAS_POSIX_TIME -DACE_LACKS_TIMESPEC_T)  #ACE在VS2015及2017上time定义冲突问题的解决
    ENDIF()

	if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET(PK_LIB_DIR ${CMAKE_CURRENT_LIST_DIR}/../lib)
        SET(PK_BIN_DIR ${CMAKE_CURRENT_LIST_DIR}/../bin)
	endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )	
ENDIF(MSVC)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${PK_INCLUDE_DIR})
LINK_DIRECTORIES(${PK_LIB_DIR})
LINK_DIRECTORIES(${PK_BIN_DIR})
#MESSAGE(${PK_LIB_DIR})
#MESSAGE(${PK_BIN_DIR})

IF(POLICY  CMP0015)
	cmake_policy(SET CMP0015 OLD)
ENDIF(POLICY  CMP0015)

IF(POLICY  CMP0011)
	cmake_policy(SET CMP0011 NEW)
ENDIF(POLICY  CMP0011)

ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ADD_DEFINITIONS(-DBOOST_NO_USER_CONFIG) #boost1.66的静态链接方法

IF(MAKE_UNIT_TEST)
# Disable Warning
ENDIF(MAKE_UNIT_TEST)

#message("RELWITHDEBINFO /Od ")
SET(CMAKE_CXX_FLAGS_RELWITHDEBUGINFO  "/Od /Ob1")
SET(CMAKE_C_FLAGS_RELWITHDEBUGINFO  "/Od /Ob1")

IF(ARM MATCHES "1")
    MESSAGE("Compile project for arm-linux") 
    SET(CMAKE_C_COMPILER "arm-linux-gnueabihf-gcc")
    SET(CMAKE_CXX_COMPILER "arm-linux-gnueabihf-g++")
    SET(ARM 1)
ENDIF()

IF(CMAKE_SYSTEM MATCHES "SunOS.*")
    MESSAGE("Compile project for SunOS.*") 
    ADD_DEFINITIONS(-DACE_NDEBUG)
    SET(CMAKE_CXX_COMPILER "CC")
    SET(CMAKE_C_COMPILER "cc")
    SET(SOLARIS 1)
    # On sun os add flag -pthreads
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -mt -D_INCLUDE_LONGLONG -D_REENTRANT -lpthread")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64 -mt -D_INCLUDE_LONGLONG -D_REENTRANT -lpthread -xs")
    IF (SUNCSTD)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -library=Cstd")
    ELSE(SUNCSTD)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -library=stlport4")
    ENDIF (SUNCSTD)
ENDIF(CMAKE_SYSTEM MATCHES "SunOS.*")

IF(${CMAKE_SYSTEM_NAME} MATCHES HP-UX)
	MESSAGE("Compile project for HP-UX") 
	SET(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
	SET(CMAKE_CXX_COMPILER "aCC")
	SET(CMAKE_C_COMPILER "cc")
	SET(HPUX 1)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} +DD64 -mt -Aa -D_INCLUDE_LONGLONG -D_REENTRANT -lpthread")
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} +DD64 -mt -Aa -D_INCLUDE_LONGLONG -D_REENTRANT -lpthread")
		SET(CMAKE_ROOT /usr/local/share/cmake-2.8)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES HP-UX)

IF(${CMAKE_SYSTEM_NAME} MATCHES AIX)
	MESSAGE("Compile project for AIX") 
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -qrtti=all -q64 -g -D_THREAD_SAFE")
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -qrtti=all -q64 -g -D_THREAD_SAFE")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES AIX)

# First for the generic no-config case (e.g. with mingw). 优先级较高，比OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES}低。如果生效，效果为：D:\Work\eview-server\bin2\RelWithDebInfo\
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PK_BIN_DIR}${SPECOUTDIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PK_BIN_DIR}${SPECOUTDIR})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PK_LIB_DIR})

# Second, for multi-config builds (e.g. msvc) 优先级最高！在VS下依次为准！
FOREACH(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
  STRING(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PK_BIN_DIR}${SPECOUTDIR})
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PK_BIN_DIR}${SPECOUTDIR})
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PK_LIB_DIR})
ENDFOREACH(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)

#IF(ARM MATCHES "1")
IF(${CMAKE_SYSTEM_NAME} MATCHES Linux)
	MESSAGE("Compile without Debuging info")
    OPTION(COMPILE_WITH_DEBUG_INFO "Compile with Debuging info" OFF)
	SET(CMAKE_BUILD_TYPE "Release")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "/O2")
    SET(CMAKE_C_FLAGS_RELWITHDEBINFO  "/O2") 
    #SET(CMAKE_CXX_FLAGS_RELWITHDEBUGINFO  "/O2")
    #SET(CMAKE_C_FLAGS_RELWITHDEBUGINFO  "/O2")
ELSE()
	MESSAGE("Compile with Debuging info")
    OPTION(COMPILE_WITH_DEBUG_INFO "Compile with Debuging info" ON)
	SET(CMAKE_BUILD_TYPE "Debug")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "/Od /Ob1 /Zi ")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO  "/Od /Ob1 /Zi ")
    #SET(CMAKE_CXX_FLAGS_RELWITHDEBUGINFO  "/Od /Ob1 /Zi ")
    #SET(CMAKE_C_FLAGS_RELWITHDEBUGINFO  "/Od /Ob1 /Zi ")
ENDIF()

